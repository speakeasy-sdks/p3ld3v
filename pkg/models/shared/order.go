// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"time"
)

// OrderStatus - Order Status
type OrderStatus string

const (
	OrderStatusPlaced    OrderStatus = "placed"
	OrderStatusApproved  OrderStatus = "approved"
	OrderStatusDelivered OrderStatus = "delivered"
)

func (e OrderStatus) ToPointer() *OrderStatus {
	return &e
}

func (e *OrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "placed":
		fallthrough
	case "approved":
		fallthrough
	case "delivered":
		*e = OrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OrderStatus: %v", v)
	}
}

type Order struct {
	Complete *bool      `json:"complete,omitempty" form:"name=complete"`
	ID       *int64     `json:"id,omitempty" form:"name=id"`
	PetID    *int64     `json:"petId,omitempty" form:"name=petId"`
	Quantity *int       `json:"quantity,omitempty" form:"name=quantity"`
	ShipDate *time.Time `json:"shipDate,omitempty" form:"name=shipDate"`
	// Order Status
	Status *OrderStatus `json:"status,omitempty" form:"name=status"`
}

func (o *Order) GetComplete() *bool {
	if o == nil {
		return nil
	}
	return o.Complete
}

func (o *Order) GetID() *int64 {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Order) GetPetID() *int64 {
	if o == nil {
		return nil
	}
	return o.PetID
}

func (o *Order) GetQuantity() *int {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *Order) GetShipDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.ShipDate
}

func (o *Order) GetStatus() *OrderStatus {
	if o == nil {
		return nil
	}
	return o.Status
}
